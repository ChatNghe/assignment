import {randomUser} from "../../service/userService";
import {createSlice, PayloadAction } from '@reduxjs/toolkit';
export interface UserState {
    user?: any
}

const initialState: UserState = {
    user: null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const userSlice = createSlice({
    name: 'user',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setUser: (state, action: PayloadAction<any>) => {
            state.user = {...action.payload};
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: builder => {
        builder.addCase(randomUser.fulfilled, (state, action) => {
            state.user = action.payload
        })
    }
});

export const {setUser} = userSlice.actions;

export default userSlice.reducer;

